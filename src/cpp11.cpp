// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// interface_fcwt.cpp
cpp11::r_bool has_openmp();
extern "C" SEXP _fCWTr_has_openmp() {
  BEGIN_CPP11
    return cpp11::as_sexp(has_openmp());
  END_CPP11
}
// interface_fcwt.cpp
cpp11::r_bool has_avx();
extern "C" SEXP _fCWTr_has_avx() {
  BEGIN_CPP11
    return cpp11::as_sexp(has_avx());
  END_CPP11
}
// interface_fcwt.cpp
std::vector<double> fcwt_raw(std::vector<double> signal, int fs, double f0, double f1, int fn, double sigma, int window_size, int nthreads, bool scaletype, bool optplans);
extern "C" SEXP _fCWTr_fcwt_raw(SEXP signal, SEXP fs, SEXP f0, SEXP f1, SEXP fn, SEXP sigma, SEXP window_size, SEXP nthreads, SEXP scaletype, SEXP optplans) {
  BEGIN_CPP11
    return cpp11::as_sexp(fcwt_raw(cpp11::as_cpp<cpp11::decay_t<std::vector<double>>>(signal), cpp11::as_cpp<cpp11::decay_t<int>>(fs), cpp11::as_cpp<cpp11::decay_t<double>>(f0), cpp11::as_cpp<cpp11::decay_t<double>>(f1), cpp11::as_cpp<cpp11::decay_t<int>>(fn), cpp11::as_cpp<cpp11::decay_t<double>>(sigma), cpp11::as_cpp<cpp11::decay_t<int>>(window_size), cpp11::as_cpp<cpp11::decay_t<int>>(nthreads), cpp11::as_cpp<cpp11::decay_t<bool>>(scaletype), cpp11::as_cpp<cpp11::decay_t<bool>>(optplans)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_fCWTr_fcwt_raw",   (DL_FUNC) &_fCWTr_fcwt_raw,   10},
    {"_fCWTr_has_avx",    (DL_FUNC) &_fCWTr_has_avx,     0},
    {"_fCWTr_has_openmp", (DL_FUNC) &_fCWTr_has_openmp,  0},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_fCWTr(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
