% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcwt.R
\name{fcwt}
\alias{fcwt}
\title{Performs a fast continuous wavelet transform.}
\usage{
fcwt(
  signal,
  sample_freq,
  freq_begin,
  freq_end,
  n_freqs,
  sigma,
  remove_coi = TRUE,
  nthreads = 8L
)
}
\arguments{
\item{signal}{Real-valued time series. The time step gaps are assumed to be uniform.}

\item{sample_freq}{Sampling rate of input time series in physical units.}

\item{freq_begin}{Sets the minimal frequency (\code{> 0}!), in same units as \code{sample_freq},
that should be contained in the output.}

\item{freq_end}{Sets the maximal frequency (\code{> freq_begin}!), in same units as
\code{sample_freq}, that should be contained in the output.}

\item{n_freqs}{Number of frequency bins generated by the CWT. The frequencies
are linearly distributed. Computation time increases
when raising the number of frequency bins.}

\item{sigma}{Sets a dimensionless parameter modifying the wavelet spread which in the
time-domain is roughly given by \eqn{\Sigma_t \sim \sqrt{2} \frac{\sigma}{f}}.
Changing this parameter adjusts the time/frequency uncertainty balance.
Defaults to 1.
Larger (lower) value of sigma corresponds to a better (worse) frequency
resolution and a worse (better) time resolution.}

\item{remove_coi}{Boundary effects can result in nonphysical artifacts. Remove those by
settings corresponding values to NA.
We define the essential support of the
(Gau√üian) wavelet to be four times its standard deviation,
\eqn{4 \Sigma_t = 2 * \sqrt{2} \frac{\sigma}{f}}, and so a wavelet touches
the boundary if the distance of the center of the wavelet to the boundary
is less then \eqn{4 \Sigma_t}. Values that fall into that range are removed
if `remove_coi = TRUE`.}

\item{nthreads}{Number of threads used by the computation, if applicable.}
}
\value{
A numeric real-valued matrix with \code{dim = c(length(signal), n_freqs)}.
}
\description{
This function call is a thin wrapper for the fcwt API.
}
\examples{
ts_sin_440 <- sin((1:44100) * 2 * pi * 440 / 44100)

fcwt(
  ts_sin_440,
  sample_freq = 44100,
  freq_begin = 50,
  freq_end = 1000,
  n_freqs = 10,
  sigma = 5
)
}
