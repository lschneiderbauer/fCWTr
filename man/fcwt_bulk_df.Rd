% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcwt_bulk_df.R
\name{fcwt_bulk_df}
\alias{fcwt_bulk_df}
\title{FCWT on long sequences}
\usage{
fcwt_bulk_df(
  time_series,
  sampling_rate,
  min_freq = sampling_rate/2000,
  nsuboctaves = 12L,
  time_resolution,
  nthreads = 8L,
  max_batch_size = NULL,
  optplan = F,
  ...
)
}
\arguments{
\item{time_series}{Time series as numeric vector.}

\item{sampling_rate}{Sampling rate of input time series in Hz.
(to establish a connection to physical units.)
The sampling rate also defines the highest possible
frequency resolution of the CWT: half of the sampling
rate.}

\item{min_freq}{Sets the minimal frequency (`>0`!) in Hz that should be
contained in the output. Computation time increases
when lowering the minimal frequency.}

\item{nsuboctaves}{Computing steps per octave}

\item{time_resolution}{Defines seconds per time index (regulates the size of
the output by performing mean-pooling.
If NULL, no pooling is performed, and the effective
time_resolution will be `1 / sampling_rate`.}

\item{nthreads}{Number of threads to use (FFTW)}

\item{max_batch_size}{The maximal batch size that is used for splitting up
the input sequence. This limits the maximal memory
that is used.
The system tries to find the optimal batch size for
FFTW processing.
In case of the parameter not being provided,
heuristics are used to try to estimate a reasonable
size.}

\item{optplan}{If TRUE uses the optimization plans that might have been
generated before by [create_optimization_schemes_raw].}

\item{...}{Other parameters that are directly passed to [fcwt].}
}
\description{
Performs a fast continuous wavelet transform on long sequences. It should
not be used on short sequences, since boundary artefacts are discarded, and
those potentially dominate for short sequences.
}
\details{
In case of input sequences that exceed the a certain size, the outputl
sequence will not fit into the local memory and the fcwt cannot be
performed in one run.
For instance, in case of processing a song of three minutes length (assuming
a simpling rate of 44100 Hz), the size of the output vector is
`3 * 60 seconds * 44100 Hz * 2 * noctaves * nsuboctaves * 4 bytes`,
which for e.g. `noctaves = 8`, and `nsuboctaves = 24`, equals ~ 24 GB, hence
nowadays already at the limit of the hardware of a modern personal computer.

In cases where the needed output time-resolution is smaller than the time
resolution of the input signal, one can perform the fcwt and reduce the
output size by pooling, see `time_resolution` parameter of [fcwt_df].
(The input signal time resolution can in general not be reduced since
high-frequency information would get lost.)

This function splits up the input sequence into batches, processes each
batch separately, reduces the time resolution, and adds the outputs together.

Attention: Boundary artefacts are removed, so some high frequency information
at the beginning and the end of the sequence is lost. (The amount depends on
the minimal frequency captured `min_freq`.)
}
\seealso{
fcwt_df create_opt_schemes
}
