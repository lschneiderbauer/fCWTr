% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcwt_df.R
\name{fcwt_df}
\alias{fcwt_df}
\title{Performs a fast continuous wavelet transform and
returns the result in a data frame.}
\usage{
fcwt_df(
  time_series,
  sample_freq,
  min_freq = sample_freq/2000,
  max_freq = sample_freq/2,
  n_freqs,
  time_resolution = NULL,
  sigma = 1,
  nthreads = 8L,
  rm.coi = TRUE,
  optplan = FALSE
)
}
\arguments{
\item{time_series}{Time series as numeric vector.}

\item{min_freq}{Sets the minimal frequency (`>0`!) in Hz that should be
contained in the output. Computation time increases
when lowering the minimal frequency.}

\item{time_resolution}{Defines seconds per time index (regulates the size of
the output by performing mean-pooling.
If NULL, no pooling is performed, and the effective
time_resolution will be `1 / sampling_rate`.}

\item{sigma}{Sets a parameter modifying the wavelet length. Adjusts
the time/frequency uncertainty balance. Defaults to 1.
Larger (lower) value of sigma corresponds to a better
(worse) frequency resolution and a worse (better) time
resolution.}

\item{rm.coi}{If TRUE, sets the values outside of the "cone of
influence" to NA.}

\item{optplan}{If TRUE uses the optimization plans that might have been
generated before by [create_optimization_schemes_raw].}

\item{sampling_rate}{Sampling rate of input time series in Hz.
(to establish a connection to physical units.)
The sampling rate also defines the highest possible
frequency resolution of the CWT: half of the sampling
rate.}
}
\value{
The time series as a data frame with the following variables:
\describe{
  \item{time_ind}{Integer-valued time index}
  \item{time}{Time in seconds}
  \item{freq}{Frequency in Hz}
  \item{value}{Absolute value of correlation coefficient}
}
}
\description{
Performs pooling to accommodate for `time_resolution`.
The maximal frequency resolved is determined by the sampling rate
of the input time series.
}
\examples{
# defaults to sigma = 1
fcwt_df(
  ts_sin_superpos,
  sampling_rate = 44100,
  time_resolution = 0.001
)

# enhance frequency resolution
fcwt_df(
  ts_sin_superpos,
  sampling_rate = 44100,
  time_resolution = 0.001,
  sigma = 5
)

}
