[{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://lschneiderbauer.github.io/fcwtr/articles/sigma.html","id":"from-uncertainty-to-resolution","dir":"Articles","previous_headings":"","what":"From uncertainty to resolution","title":"Controlling the time/frequency resolution","text":"time frequency resolution Δt\\Delta t Δf\\Delta f can expect certain value Σ\\Sigma? resolution set Gaussian spread turn quantified uncertainties σt\\sigma_t σf\\sigma_f. Interpreting Gaussian window function, expect order achieve certain resolution Δt\\Delta_t window size needs least equal (smaller) Δt\\Delta t. Since Gaussian infinite support, need make less arbitrary decision exponential falloff Gaussian close enough zero liking.  case decide 4σ4\\,\\sigma effective width window function, expect effective resolution Δt:=4Σf\\Delta t:=4\\frac{Σ}{f} Δf:=4f2πΣ\\Delta f:=4\\frac{f}{2πΣ}","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/articles/sigma.html","id":"example-piano-keys","dir":"Articles","previous_headings":"","what":"Example: Piano keys","title":"Controlling the time/frequency resolution","text":"Let’s try understand meaning Σ\\Sigma via example: like analyse piano music, able least distinguish different piano key frequencies. can example check resolutions corresponding Σ=1\\Sigma=1 key A4 (440 Hz) helper functions implement formulas : see now, Σ=1\\Sigma=1, frequency resolution 440 Hz 280 Hz! spreading way high able distinguish different keys (next key #4 466 Hz previous key Ab4 415 Hz), need able least resolve difference, 15 Hz. can use another helper function check corresponding Σ\\Sigma : tells us need Σ=19\\Sigma=19 higher. Let’s double-check implies time resolution: means, can detect frequencies time resolution 170 milliseconds. typical fast piano beat around 180 beats per minutes (> Prestissimo), means, 3 beats per seconds, required time resolution detect least 330 milliseconds: time resolution still , safe side.2 Let’s compare settings practice. example serves simple piano sample playing couple 440 Hz notes beginning simple chords end.","code":"library(fCWTr) sigma_resolution(sigma = 1, u(440, \"Hz\")) #> $time #> 0.009090909 [1/Hz] #>  #> $freq #> 280.1127 [Hz] sigma_from_frequency_resolution(u(15, \"Hz\"), u(440, \"Hz\")) #> [1] 18.67418 sigma_resolution(sigma = 19, u(440, \"Hz\")) #> $time #> 0.1727273 [1/Hz] #>  #> $freq #> 14.74277 [Hz]"},{"path":"https://lschneiderbauer.github.io/fcwtr/articles/sigma.html","id":"high-time-resolution-low-frequency-resolution","dir":"Articles","previous_headings":"Example: Piano keys","what":"High time resolution, low frequency resolution","title":"Controlling the time/frequency resolution","text":"","code":"sigma_resolution(sigma = 1, u(440, \"Hz\")) #> $time #> 0.009090909 [1/Hz] #>  #> $freq #> 280.1127 [Hz] library(ggplot2) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found  fcwt_batch(   ts_piano_sample,   sample_freq = u(44.1, \"kHz\") / 4,   freq_begin = u(220, \"Hz\"),   freq_end = u(440, \"Hz\") * 4,   # 5 octaves, 12 keys per octave, 3 frequencies per key   n_freqs = 12 * 5 * 3,   sigma = 1,   freq_scale = \"log\",   time_resolution = u(100, \"ms\") ) |>   plot()"},{"path":"https://lschneiderbauer.github.io/fcwtr/articles/sigma.html","id":"good-middle-ground","dir":"Articles","previous_headings":"Example: Piano keys","what":"Good middle ground","title":"Controlling the time/frequency resolution","text":"","code":"sigma_resolution(sigma = 19, u(440, \"Hz\")) #> $time #> 0.1727273 [1/Hz] #>  #> $freq #> 14.74277 [Hz] library(ggplot2)  fcwt_batch(   ts_piano_sample,   sample_freq = u(44.1, \"kHz\") / 4,   freq_begin = u(220, \"Hz\"),   freq_end = u(440, \"Hz\") * 4,   # 5 octaves, 12 keys per octave, 3 frequencies per key   n_freqs = 12 * 5 * 3,   sigma = 20,   freq_scale = \"log\",   time_resolution = u(100, \"ms\") ) |>   plot()"},{"path":"https://lschneiderbauer.github.io/fcwtr/articles/sigma.html","id":"low-time-resolution-high-frequency-resolution","dir":"Articles","previous_headings":"Example: Piano keys","what":"Low time resolution, high frequency resolution","title":"Controlling the time/frequency resolution","text":"Note Σ=100\\Sigma=100 barely time resolution one second. can see can resolve beats second 12 18 anymore:  way, Σ\\Sigma can thought exposure time camera adjusted manually. exposure time long picture becomes blurry, short, picture becomes dark see anything. good balance key good photo.","code":"sigma_resolution(sigma = 100, u(440, \"Hz\")) #> $time #> 0.9090909 [1/Hz] #>  #> $freq #> 2.801127 [Hz] fcwt_batch(   ts_piano_sample,   sample_freq = u(44.1, \"kHz\") / 4,   freq_begin = u(220, \"Hz\"),   freq_end = u(440, \"Hz\") * 4,   # 5 octaves, 12 keys per octave, 3 frequencies per key   n_freqs = 12 * 5 * 3,   sigma = 40,   freq_scale = \"log\",   time_resolution = u(100, \"ms\") ) |>   plot()"},{"path":"https://lschneiderbauer.github.io/fcwtr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Schneiderbauer. Author, maintainer, copyright holder. Lukas P. . Arts. Copyright holder.           Author majority C++ code, indicated respective header files. Egon L. van den Broek. Copyright holder.           Author majority C++ code, indicated respective header files.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schneiderbauer L (2025). fCWTr: Fast Continuous Wavelet Transform. R package version 0.2.9000, https://github.com/lschneiderbauer/fCWTr, https://lschneiderbauer.github.io/fCWTr/.","code":"@Manual{,   title = {fCWTr: Fast Continuous Wavelet Transform},   author = {Lukas Schneiderbauer},   year = {2025},   note = {R package version 0.2.9000, https://github.com/lschneiderbauer/fCWTr},   url = {https://lschneiderbauer.github.io/fCWTr/}, }"},{"path":"https://lschneiderbauer.github.io/fcwtr/index.html","id":"fcwtr-","dir":"","previous_headings":"","what":"Fast Continuous Wavelet Transform","title":"Fast Continuous Wavelet Transform","text":"R package fCWTr wraps fCWT library, library implementing continuous wavelet transform Morlet wavelet, utilizing power fftw, fast fourier transform implementation. provides R-like functional interface implements common S3 methods convenience. See original paper Arts, L.P.., van den Broek, E.L. fast continuous wavelet transformation (fCWT) real-time, high-quality, noise-resistant time–frequency analysis. Nat Comput Sci 2, 47–58 (2022). https://doi.org/10.1038/s43588-021-00183-z","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/index.html","id":"system-dependencies","dir":"","previous_headings":"","what":"System dependencies","title":"Fast Continuous Wavelet Transform","text":"R >= 4.1 fftw library single-precision support enabled (used fCWT) Optional: CPU/compiler supporting AVX instruction set Windows, OpenMP support disabled since rtools decided compile fftw without OpenMP support. Linux MacOS build scripts automatically detect whether OpenMP support available. default, compiler setups make use AVX increase portability binary. R user CPU supporting AVX want make use , might need manually enable compiler flags let R know , install package source (gets compiled machine). One way enable flags create file ~/.R/Makevars following content:","code":"CPPFLAGS = -mavx CXXFLAGS = -mavx"},{"path":"https://lschneiderbauer.github.io/fcwtr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast Continuous Wavelet Transform","text":"can install latest CRAN release fCWTr : Alternatively, can install development version fCWTr like (requiring installed devtools package): Note installation process might fail package needs compiled source system requirements satisfied. error message give hints, however, ’s missing system. Common confusion: fftw installed, compiled without single precision support. Please consult fftw.org help.","code":"install.packages(\"fCWTr\") devtools::install_github(\"lschneiderbauer/fCWTr\")"},{"path":"https://lschneiderbauer.github.io/fcwtr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast Continuous Wavelet Transform","text":"basic example invokes fCWT library calculate continuous wavelet transform plot result. result can converted data frame need : can also directly plot resulting scalogram:  long sequences, required memory can exceed available local memory. case can useful reduce time resolution result process data batches. can done fcwt_batch(). case batch size explicitly provided, heuristics used determine batch size automatically:","code":"library(fCWTr)  # A signal encoded in a numeric vector. # In this example we use some superimposed sin signals. signal <- ts_sin_superpos  output <-   fcwt(     signal,     sample_freq = u(44.1, \"kHz\"),     freq_begin = u(16, \"Hz\"),     freq_end = u(2100, \"Hz\"),     n_freqs = 200,     sigma = 5   )  # The result is basically a numeric matrix with time and frequency dimension dim(output) #> [1] 6000  200  # Some meta data is recorded too output #> _Scalogram_ #> <> (Time/Frequency) dimension: [6000,200] #> <> Sampling rate: 44.1 [kHz] #> <> Frequency scale: 16 [Hz] - 2100 [Hz], linear #> <> Time offset: 0 [s]  #> <> Sigma: 5 #> Time/frequency matrix summary #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00    0.00    0.13    0.04    2.81  232338 head(as.data.frame(output), 10) #>    time_index             time      freq value #> 1           0 0.000000e+00 [s] 2100 [Hz]    NA #> 2           1 2.267574e-05 [s] 2100 [Hz]    NA #> 3           2 4.535147e-05 [s] 2100 [Hz]    NA #> 4           3 6.802721e-05 [s] 2100 [Hz]    NA #> 5           4 9.070295e-05 [s] 2100 [Hz]    NA #> 6           5 1.133787e-04 [s] 2100 [Hz]    NA #> 7           6 1.360544e-04 [s] 2100 [Hz]    NA #> 8           7 1.587302e-04 [s] 2100 [Hz]    NA #> 9           8 1.814059e-04 [s] 2100 [Hz]    NA #> 10          9 2.040816e-04 [s] 2100 [Hz]    NA plot(output, time_unit = \"ms\") batch_result <-   fcwt_batch(     rep(ts_sin_sin, 5),     sample_freq = u(44.1, \"kHz\"),     freq_begin = u(100, \"Hz\"),     freq_end = u(12, \"kHz\"),     n_freqs = 200,     sigma = 4,     time_resolution = u(10, \"ms\")   )  plot(batch_result)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.data.frame.fcwtr_scalogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce the scalogram matrix to a data frame — as.data.frame.fcwtr_scalogram","title":"Coerce the scalogram matrix to a data frame — as.data.frame.fcwtr_scalogram","text":"Internally, scalogram resulting fcwt() represented numeric matrix. method coerces matrix reasonable data frame. Note conversion significant run time cost.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.data.frame.fcwtr_scalogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce the scalogram matrix to a data frame — as.data.frame.fcwtr_scalogram","text":"","code":"# S3 method for class 'fcwtr_scalogram' as.data.frame(x, ...)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.data.frame.fcwtr_scalogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce the scalogram matrix to a data frame — as.data.frame.fcwtr_scalogram","text":"x \"fcwtr_scalogram\" object resulting fcwt(). ... additional arguments passed methods.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.data.frame.fcwtr_scalogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce the scalogram matrix to a data frame — as.data.frame.fcwtr_scalogram","text":"data.frame() object representing scalogram data four columns: time_index integer index uniquely identifying time slices. time time difference first time slice physical units. time unit inverse frequency unit chosen user sample_freq argument fcwt(). freq frequency units sample_freq argument fcwt(). value fCWT result particular time-frequency combination.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.data.frame.fcwtr_scalogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce the scalogram matrix to a data frame — as.data.frame.fcwtr_scalogram","text":"","code":"fcwt(   sin((1:5000) * 2 * pi * 440 / 44100),   sample_freq = 44100,   n_freqs = 10 ) |>   as.data.frame() |>   head() #>   time_index             time       freq value #> 1          0 0.000000e+00 [s] 22050 [Hz]    NA #> 2          1 2.267574e-05 [s] 22050 [Hz]    NA #> 3          2 4.535147e-05 [s] 22050 [Hz]    NA #> 4          3 6.802721e-05 [s] 22050 [Hz]    NA #> 5          4 9.070295e-05 [s] 22050 [Hz]    NA #> 6          5 1.133787e-04 [s] 22050 [Hz]    NA"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.matrix.fcwtr_scalogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the data matrix from a scalogram — as.matrix.fcwtr_scalogram","title":"Extract the data matrix from a scalogram — as.matrix.fcwtr_scalogram","text":"Strips attributes class scalogram object retrieve pure matrix.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.matrix.fcwtr_scalogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the data matrix from a scalogram — as.matrix.fcwtr_scalogram","text":"","code":"# S3 method for class 'fcwtr_scalogram' as.matrix(x, ...)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.matrix.fcwtr_scalogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the data matrix from a scalogram — as.matrix.fcwtr_scalogram","text":"x \"fcwtr_scalogram\" object resulting fcwt(). ... additional arguments passed methods.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.matrix.fcwtr_scalogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the data matrix from a scalogram — as.matrix.fcwtr_scalogram","text":"two dimensional numeric vector, inheriting class \"matrix\".","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/as.matrix.fcwtr_scalogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the data matrix from a scalogram — as.matrix.fcwtr_scalogram","text":"","code":"options(max.print = 10)  fcwt(   sin((1:5000) * 2 * pi * 440 / 44100),   sample_freq = 44100,   n_freqs = 10 ) |>   as.matrix() #>                 [,1]         [,2]         [,3]         [,4]         [,5] #>    [1,]           NA           NA           NA           NA           NA #>                 [,6]         [,7]         [,8]         [,9] [,10] #>    [1,]           NA           NA           NA           NA    NA #>  [ reached getOption(\"max.print\") -- omitted 4999 rows ]"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/autoplot.fcwtr_scalogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ggplot object resembling a scalogram — autoplot.fcwtr_scalogram","title":"Create a ggplot object resembling a scalogram — autoplot.fcwtr_scalogram","text":"Create ggplot object resembling scalogram","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/autoplot.fcwtr_scalogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ggplot object resembling a scalogram — autoplot.fcwtr_scalogram","text":"","code":"# S3 method for class 'fcwtr_scalogram' autoplot(   object,   n = 1000,   time_unit = \"s\",   freq_unit = \"Hz\",   transf = identity,   ... )"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/autoplot.fcwtr_scalogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ggplot object resembling a scalogram — autoplot.fcwtr_scalogram","text":"object \"fcwtr_scalogram\" object resulting fcwt(). n plotting function reduces time resolution averaging generate reasonable graphics format. n number time steps plotted. Defaults n = 1000. time_unit time unit used x-axis scale. Default \"s\" - seconds. See units::valid_udunits() units::valid_udunits_prefixes() valid expressions. freq_unit frequency unit used y-axis scale. Defaults \"Hz\" - \"Hertz\". See units::valid_udunits() units::valid_udunits_prefixes() valid expressions. transf function, taking vector returning vector, used transform scalogram values plotting. ... arguments passed specific methods","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/autoplot.fcwtr_scalogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ggplot object resembling a scalogram — autoplot.fcwtr_scalogram","text":"ggplot object.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/autoplot.fcwtr_scalogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ggplot object resembling a scalogram — autoplot.fcwtr_scalogram","text":"","code":"library(ggplot2)  res <-   fcwt(     sin((1:4410) * 2 * pi * 440 / 44100),     sample_freq = 44100,     freq_begin = 50,     freq_end = 1000,     n_freqs = 10,     sigma = 5   )  autoplot(res, time_unit = \"ms\")"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/avx_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for AVX instruction set support — avx_enabled","title":"Check for AVX instruction set support — avx_enabled","text":"function checks fCWTr compiled AVX instruction set support. AVX instructions need supported users' CPU order work.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/avx_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for AVX instruction set support — avx_enabled","text":"","code":"avx_enabled()"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/avx_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for AVX instruction set support — avx_enabled","text":"( TRUE | FALSE ) Returns TRUE AVX support enabled, FALSE otherwise.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/avx_enabled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for AVX instruction set support — avx_enabled","text":"default, compiler setups make use AVX increase portability binary. R user CPU supporting AVX want make use , might need manually enable compiler flags let R know , install package source (gets compiled machine).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/avx_enabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for AVX instruction set support — avx_enabled","text":"","code":"avx_enabled() #> [1] FALSE"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/du.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop physical unit — du","title":"Drop physical unit — du","text":"Drop units dimensionful quantity retrieve dimensionless number. dimensionless number defined ratio x one unit u(1, unit).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/du.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop physical unit — du","text":"","code":"du(x, unit = \"1\")"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/du.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop physical unit — du","text":"x dimensionful numeric vector (S3 class \"units\"), e.g. generated u() subsequent calculations. unit character indicating unit. See units::valid_udunits() units::valid_udunits_prefixes() possible units.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/du.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop physical unit — du","text":"dimensionless number defined ratio x one unit u(1, unit).","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/du.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop physical unit — du","text":"","code":"x <- u(1, \"km\")   # retrieve a dimensionless number  # from x in units of \"meter\"  du(x, \"m\") #> [1] 1000   # drop the unit of a dimensionaless \"unit\" quantity  du(x / x) #> [1] 1"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast continuous wavelet transform — fcwt","title":"Fast continuous wavelet transform — fcwt","text":"core function package making use fCWT library. processes input signal form real valued numeric vector interpreted evenly spaced time series returns absolute values spectogram, .e. graph time frequency dimension.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast continuous wavelet transform — fcwt","text":"","code":"fcwt(   signal,   sample_freq,   n_freqs,   freq_begin = 2 * sample_freq/length(signal),   freq_end = sample_freq/2,   freq_scale = c(\"linear\", \"log\"),   sigma = 2 * pi,   remove_coi = TRUE,   n_threads = 2L )"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast continuous wavelet transform — fcwt","text":"signal Real-valued time series. time steps assumed evenly spaced. sample_freq Sampling rate input time series. number primarily establishes connection physical units used frequency definitions well units output data. Expects either value frequency units, generated u(), pure number, case interpreted units 'Hertz'. n_freqs Number frequency bins generated CWT. frequencies linearly logarithmically distributed, depending freq_scale argument. Computation time increases raising number frequency bins. freq_begin, freq_end Optionally specifies frequency range [freq_end, freq_begin]. specified maximal meaningful frequency range, depending input signal, taken. frequency-valued number, generated u(), pure number, interpreted units 'Hertz'. freq_scale ( \"freq\" | \"log\" ) frequency scale linear logarithmic? \"linear\"  / \"log\" linear / logarithmic. sigma Sets dimensionless parameter \\(\\Sigma\\) controlling wavelet spread. Changing parameter adjusts time/frequency uncertainty balance, \\(\\Delta t = 4 \\frac{\\Sigma}{f}\\), \\(\\Delta f = 4 \\frac{f}{2\\pi \\Sigma}\\). Larger (lower) value sigma corresponds better (worse) frequency resolution worse (better) time resolution. information, see vignette(\"sigma\", package = \"fCWTr\")). Defaults \\(2\\pi\\). Note really natural choice sigma, depends use case. default choice can well quite bad choice (probably audio data). remove_coi ( TRUE | FALSE ) Boundary effects can result nonphysical artifacts. remove_coi = TRUE, effectively removed setting corresponding values NA. define essential support (Gaussian) wavelet four times standard deviation, \\(\\Delta t = \\frac{\\sigma}{f}\\), wavelet touches boundary distance center wavelet boundary less \\(\\Delta t /2\\). Values fall range removed remove_coi = TRUE. n_threads Number threads used computation, supported platform. Defaults 2 threads (accommodate CRAN requirements). openmp_enabled() returns FALSE, argument ignored, single thread used.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast continuous wavelet transform — fcwt","text":"spectogram, numeric real-valued matrix dimensions dim = c(length(signal), n_freqs), curated additional properties. matrix wrapped S3-class fcwtr_scalogram plotting coercion functions can used conveniently. Use .matrix() strip curated information. use .data.frame() convert another data format.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast continuous wavelet transform — fcwt","text":"wavelet used calculation called Morlet wavelet, sinusoidal wave modulated Gaussian whose spread controlled argument sigma. See original paper Arts, L.P.., van den Broek, E.L. fast continuous wavelet transformation (fCWT) real-time, high-quality, noise-resistant time–frequency analysis. Nat Comput Sci 2, 47–58 (2022). doi:10.1038/s43588-021-00183-z","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast continuous wavelet transform — fcwt","text":"","code":"ts_sin_440 <- sin((1:5000) * 2 * pi * 440 / 44100)  fcwt(   ts_sin_440,   sample_freq = u(44.1, \"kHz\"),   freq_begin = u(50, \"Hz\"),   freq_end = u(1000, \"Hz\"),   n_freqs = 10,   sigma = 5 ) #> _Scalogram_ #> <> (Time/Frequency) dimension: [5000,10] #> <> Sampling rate: 44.1 [kHz] #> <> Frequency scale: 50 [Hz] - 1000 [Hz], linear #> <> Time offset: 0 [s]  #> <> Sigma: 5 #> Time/frequency matrix summary #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   0.000   0.000   0.086   0.002   0.728   23446"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast continuous wavelet transform - Batch processing — fcwt_batch","title":"Fast continuous wavelet transform - Batch processing — fcwt_batch","text":"Performs fast continuous wavelet transform long sequences sequentially processing junks input signal keeping low-resolution output data averaging preserve memory. useful long signals whose output fit available memory whole. used short signals since boundary artefacts automatically discarded (potentially dominate short signals).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast continuous wavelet transform - Batch processing — fcwt_batch","text":"","code":"fcwt_batch(   signal,   sample_freq,   n_freqs,   freq_begin = 2 * sample_freq/length(signal),   freq_end = sample_freq/2,   freq_scale = c(\"linear\", \"log\"),   sigma = 1,   time_resolution,   max_batch_size = ceiling(1 * 10^9/(n_freqs * 8)/2),   n_threads = 2L,   progress_bar = FALSE )"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast continuous wavelet transform - Batch processing — fcwt_batch","text":"signal Real-valued time series. time steps assumed evenly spaced. sample_freq Sampling rate input time series. number primarily establishes connection physical units used frequency definitions well units output data. Expects either value frequency units, generated u(), pure number, case interpreted units 'Hertz'. n_freqs Number frequency bins generated CWT. frequencies linearly logarithmically distributed, depending freq_scale argument. Computation time increases raising number frequency bins. freq_begin, freq_end Optionally specifies frequency range [freq_end, freq_begin]. specified maximal meaningful frequency range, depending input signal, taken. frequency-valued number, generated u(), pure number, interpreted units 'Hertz'. freq_scale ( \"freq\" | \"log\" ) frequency scale linear logarithmic? \"linear\"  / \"log\" linear / logarithmic. sigma Sets dimensionless parameter \\(\\Sigma\\) controlling wavelet spread. Changing parameter adjusts time/frequency uncertainty balance, \\(\\Delta t = 4 \\frac{\\Sigma}{f}\\), \\(\\Delta f = 4 \\frac{f}{2\\pi \\Sigma}\\). Larger (lower) value sigma corresponds better (worse) frequency resolution worse (better) time resolution. information, see vignette(\"sigma\", package = \"fCWTr\")). Defaults \\(2\\pi\\). Note really natural choice sigma, depends use case. default choice can well quite bad choice (probably audio data). time_resolution time resolution output signal physical units (u()), pure number, interpreted unit seconds. time resolution high-resolution result reduced time_resolution averaging fixed time slice windows. Memory consumption directly related . time_resolution higher time resolution input signal. max_batch_size maximal batch size used splitting input sequence. limits maximal memory used. Defaults roughly 1GB, conservative taking account R might make copies processing . actual batch size largest batch size smaller max_batch_size compatible requested time_resolution. aim set batch size large possible given memory constraints (boundary effects become larger smaller batch size). n_threads Number threads used computation, supported platform. Defaults 2 threads (accommodate CRAN requirements). openmp_enabled() returns FALSE, argument ignored, single thread used. progress_bar Monitoring progress can sometimes useful performing time consuming operations. Setting progress_bar = TRUE enables printing progress bar console, printing \"loss ratio\" number batches. loss ratio number 0 1 indicates much batch computation thrown away due boundary artefacts. higher batch size smaller loss ratio . Defaults FALSE.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast continuous wavelet transform - Batch processing — fcwt_batch","text":"spectogram, numeric real-valued matrix dimensions roughly dim ~ c(length(signal) * time_resolution * sample_freq, n_freqs). exact length output depends boundary effect details. matrix wrapped S3-class \"fcwtr_scalogram\" plotting coercion functions can used conveniently.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt_batch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast continuous wavelet transform - Batch processing — fcwt_batch","text":"case input sequences exceed certain size, output sequence fit local memory fcwt performed one run. instance, case processing song 10 minutes length (assuming sampling rate 44100 Hz), size output vector 10 * 60 seconds * 44100 Hz * nfreqs * 8 bytes, e.g. nfreqs = 200, equals ~ 42 GB, hence nowadays already limit hardware modern personal computer. cases required output time-resolution smaller time resolution input signal, one can perform fcwt() reduce output size averaging. (input signal time resolution can general reduced since high-frequency information get lost.) function splits input sequence batches, processes batch separately, reduces time resolution, adds outputs together. Attention: contrast fcwt() boundary artefacts automatically removed, information beginning end sequence lost. (amount depends minimal frequency captured min_freq.)","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/fcwt_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast continuous wavelet transform - Batch processing — fcwt_batch","text":"","code":"fcwt_batch(   ts_sin_sin,   sample_freq = 44100,   freq_begin = 100,   freq_end = 11000,   n_freqs = 30,   sigma = 10,   time_resolution = 0.01 ) #> _Scalogram_ #> <> (Time/Frequency) dimension: [60,30] #> <> Sampling rate: 100 [Hz] #> <> Frequency scale: 100 [Hz] - 11000 [Hz], linear #> <> Time offset: 0.2 [s]  #> <> Sigma: 10 #> Time/frequency matrix summary #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 0.0000000 0.0000041 0.0000116 0.0256150 0.0000365 0.9354089"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/openmp_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for OpenMP support — openmp_enabled","title":"Check for OpenMP support — openmp_enabled","text":"function checks OpenMP support enabled. responsible multithreading capabilities fcwt(). OpenMP enabled parameter n_threads fcwt() ignored.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/openmp_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for OpenMP support — openmp_enabled","text":"","code":"openmp_enabled()"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/openmp_enabled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for OpenMP support — openmp_enabled","text":"( TRUE | FALSE ) Returns TRUE OpenMP support enabled, FALSE otherwise.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/openmp_enabled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for OpenMP support — openmp_enabled","text":"OpenMP can used underlying fCWT library fftw library platform compiled OpenMP support fCWTr package compiled OpenMP support. using pre-built package binaries (like typical using R Windows), depends (CRAN) build server whether conditions met. influenced package author. user building R package , user needs make sure fftw library platform built OpenMP support. fCWTr package configured use OpenMP fftw-OpenMP support available.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/openmp_enabled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for OpenMP support — openmp_enabled","text":"","code":"openmp_enabled() #> [1] TRUE"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/plot.fcwtr_scalogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Scalogram plotting — plot.fcwtr_scalogram","title":"Scalogram plotting — plot.fcwtr_scalogram","text":"Plots scalogram resulting fcwt(). Requires ggplot2.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/plot.fcwtr_scalogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scalogram plotting — plot.fcwtr_scalogram","text":"","code":"# S3 method for class 'fcwtr_scalogram' plot(x, n = 1000, time_unit = \"s\", freq_unit = \"Hz\", transf = identity, ...)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/plot.fcwtr_scalogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scalogram plotting — plot.fcwtr_scalogram","text":"x \"fcwtr_scalogram\" object resulting fcwt(). n plotting function reduces time resolution averaging generate reasonable graphics format. n number time steps plotted. Defaults n = 1000. time_unit time unit used x-axis scale. Default \"s\" - seconds. See units::valid_udunits() units::valid_udunits_prefixes() valid expressions. freq_unit frequency unit used y-axis scale. Defaults \"Hz\" - \"Hertz\". See units::valid_udunits() units::valid_udunits_prefixes() valid expressions. transf function, taking vector returning vector, used transform scalogram values plotting. ... arguments passed specific methods","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/plot.fcwtr_scalogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scalogram plotting — plot.fcwtr_scalogram","text":"return value, called side effects.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/plot.fcwtr_scalogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scalogram plotting — plot.fcwtr_scalogram","text":"","code":"ts_sin_440 <- sin((1:4410) * 2 * pi * 440 / 44100)  res <-   fcwt(     ts_sin_440,     sample_freq = 44100,     freq_begin = 50,     freq_end = 1000,     n_freqs = 10,     sigma = 5   )  plot(res, time_unit = \"ms\")"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/print.fcwtr_scalogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the scalogram — print.fcwtr_scalogram","title":"Print the scalogram — print.fcwtr_scalogram","text":"print() prints argument returns invisibly (via invisible(x)).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/print.fcwtr_scalogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the scalogram — print.fcwtr_scalogram","text":"","code":"# S3 method for class 'fcwtr_scalogram' print(x, ...)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/print.fcwtr_scalogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the scalogram — print.fcwtr_scalogram","text":"x \"fcwtr_scalogram\" object resulting fcwt() print. ... arguments passed methods.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/print.fcwtr_scalogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the scalogram — print.fcwtr_scalogram","text":"Returns argument x invisibly.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/rbind.fcwtr_scalogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine scalograms in ","title":"Combine scalograms in ","text":"Given two scalograms identical sampling frequencies, frequency scales sigma, can useful combine several single object creating longer time series. function errs conditions satisfied.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/rbind.fcwtr_scalogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine scalograms in ","text":"","code":"# S3 method for class 'fcwtr_scalogram' rbind(...)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/rbind.fcwtr_scalogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine scalograms in ","text":"... One \"fcwtr_scalogram\" objects, generated fcwt().","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/rbind.fcwtr_scalogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine scalograms in ","text":"Returns new time-wise combined \"fcwtr_scalogram\" object.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/rbind.fcwtr_scalogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine scalograms in ","text":"scalograms stitched together chronological fashion (.e. first argument initial piece, etc.). Time offset information kept first piece.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/rbind.fcwtr_scalogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine scalograms in ","text":"","code":"ts_sin_440 <- sin((1:5000) * 2 * pi * 440 / 44100)  res <-   fcwt(     ts_sin_440,     sample_freq = u(44.1, \"kHz\"),     freq_begin = u(50, \"Hz\"),     freq_end = u(1000, \"Hz\"),     n_freqs = 10,     sigma = 5   )  print(res) #> _Scalogram_ #> <> (Time/Frequency) dimension: [5000,10] #> <> Sampling rate: 44.1 [kHz] #> <> Frequency scale: 50 [Hz] - 1000 [Hz], linear #> <> Time offset: 0 [s]  #> <> Sigma: 5 #> Time/frequency matrix summary #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   0.000   0.000   0.000   0.086   0.002   0.728   23446   # doubled scalogram res_doubled <- rbind(res, res)  print(res_doubled) #> _Scalogram_ #> <> (Time/Frequency) dimension: [10000,10] #> <> Sampling rate: 44.1 [kHz] #> <> Frequency scale: 50 [Hz] - 1000 [Hz], linear #> <> Time offset: 0 [s]  #> <> Sigma: 5 #> Time/frequency matrix summary #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00    0.00    0.09    0.00    0.73   46892"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_frequency_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Sigma from a frequency resolution requirement — sigma_from_frequency_resolution","title":"Determine Sigma from a frequency resolution requirement — sigma_from_frequency_resolution","text":"Setting correct value sigma fcwt() particular use case important. Sigma controls wavelet spread used FCWT determines time-/frequency resolution (depending given reference frequency).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_frequency_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Sigma from a frequency resolution requirement — sigma_from_frequency_resolution","text":"","code":"sigma_from_frequency_resolution(resolution, freq)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_frequency_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Sigma from a frequency resolution requirement — sigma_from_frequency_resolution","text":"resolution required frequency resolution frequency units (see u()). freq reference frequency required resolution must hold. Must quantity frequency units (see u()).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_frequency_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Sigma from a frequency resolution requirement — sigma_from_frequency_resolution","text":"dimensionless number controlling FCWT wavelet spread, corresponding sigma argument fcwt().","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_frequency_resolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Sigma from a frequency resolution requirement — sigma_from_frequency_resolution","text":"set high frequency resolution, time resolution output signal suffer, vice versa. Determining correct balance particular use case can crucial. function determines value sigma particular frequency resolution requirement.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_frequency_resolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Sigma from a frequency resolution requirement — sigma_from_frequency_resolution","text":"","code":"ref_freq <- u(440, \"Hz\") sigma <- sigma_from_frequency_resolution(u(7, \"Hz\"), ref_freq)  sigma_resolution(sigma, ref_freq) #> $time #> 0.3637827 [1/Hz] #>  #> $freq #> 7 [Hz] #>"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_time_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine Sigma from a time resolution requirement — sigma_from_time_resolution","title":"Determine Sigma from a time resolution requirement — sigma_from_time_resolution","text":"Setting correct value sigma fcwt() particular use case important. Sigma controls wavelet spread used FCWT determines time-/frequency resolution (depending given reference frequency).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_time_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine Sigma from a time resolution requirement — sigma_from_time_resolution","text":"","code":"sigma_from_time_resolution(resolution, freq)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_time_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine Sigma from a time resolution requirement — sigma_from_time_resolution","text":"resolution required time resolution frequency units (see u()). freq reference frequency required resolution must hold. Must quantity frequency units (see u()).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_time_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine Sigma from a time resolution requirement — sigma_from_time_resolution","text":"dimensionless number controlling FCWT wavelet spread, corresponding sigma argument fcwt().","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_time_resolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine Sigma from a time resolution requirement — sigma_from_time_resolution","text":"set high frequency resolution, time resolution output signal suffer, vice versa. Determining correct balance particular use case can crucial. function determines value sigma particular time resolution requirement.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_from_time_resolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine Sigma from a time resolution requirement — sigma_from_time_resolution","text":"","code":"ref_freq <- u(440, \"Hz\") sigma <- sigma_from_time_resolution(u(10, \"ms\"), ref_freq)  sigma_resolution(sigma, ref_freq) #> $time #> 0.01 [1/Hz] #>  #> $freq #> 254.6479 [Hz] #>"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_resolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Time/Frequency Resolution — sigma_resolution","title":"Calculates Time/Frequency Resolution — sigma_resolution","text":"given sigma reference frequency freq function calculates expected time frequency resolution respectively.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_resolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Time/Frequency Resolution — sigma_resolution","text":"","code":"sigma_resolution(sigma, freq)"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_resolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Time/Frequency Resolution — sigma_resolution","text":"sigma dimensionless positive parameter fcwt() controlling wavelet spread. freq reference frequency frequency time resolution calculated. Must quantity frequency units (see u()).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_resolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Time/Frequency Resolution — sigma_resolution","text":"named list two elements: \"time\" \"freq\", time frequency units. obey property \\(time \\times freq = \\frac{8]{\\pi}}\\).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_resolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Time/Frequency Resolution — sigma_resolution","text":"Note resolution depends reference frequency, since FCWT scales wavelet spread depending frequency natural way. (contrast simple fixed-windowed Fourier Transform).","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sigma_resolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Time/Frequency Resolution — sigma_resolution","text":"","code":"sigma_resolution(1, u(440, \"Hz\")) #> $time #> 0.009090909 [1/Hz] #>  #> $freq #> 280.1127 [Hz] #>"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sub-.fcwtr_scalogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract parts of a scalogram — [.fcwtr_scalogram","title":"Extract parts of a scalogram — [.fcwtr_scalogram","text":"Extract parts scalogram","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sub-.fcwtr_scalogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract parts of a scalogram — [.fcwtr_scalogram","text":"","code":"# S3 method for class 'fcwtr_scalogram' x[i, j]"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sub-.fcwtr_scalogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract parts of a scalogram — [.fcwtr_scalogram","text":"x \"fcwtr_scalogram\" object resulting fcwt(). , j Indices corresponding time slices spectogram specify elements extract. Indices numeric vectors empty (missing) NULL. Numeric values coerced integer whole numbers .integer large values trunc() (hence truncated towards zero). time offset scalogram adjusted correspond min(). [-indexing : , j, ... can logical vectors, indicating elements/slices select. vectors recycled necessary match corresponding extent. , j, ... can also negative integers, indicating elements/slices leave selection. indexing arrays [ single argument can matrix many columns dimensions x; result vector elements corresponding sets indices row . index value NULL treated integer(0).","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sub-.fcwtr_scalogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract parts of a scalogram — [.fcwtr_scalogram","text":"Another \"fcwtr_scalogram\" object contains part data.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/sub-.fcwtr_scalogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract parts of a scalogram — [.fcwtr_scalogram","text":"","code":"fcwt(   sin((1:5000) * 2 * pi * 440 / 44100),   sample_freq = 44100,   n_freqs = 10 )[1:1000, 2:7] #> _Scalogram_ #> <> (Time/Frequency) dimension: [1000,6] #> <> Sampling rate: 44100 [Hz] #> <> Frequency scale: 17.64 [Hz] - 22050 [Hz], linear #> <> Time offset: 0 [s]  #> <> Sigma: 6.283185 #> Time/frequency matrix summary #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #> 0.00000 0.00000 0.00000 0.00000 0.00000 0.00026     273"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_piano_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple piano audio sample — ts_piano_sample","title":"A simple piano audio sample — ts_piano_sample","text":"sample frequency 11025 Hz.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_piano_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple piano audio sample — ts_piano_sample","text":"","code":"ts_piano_sample"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_piano_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A simple piano audio sample — ts_piano_sample","text":"numeric vector containing time series signal.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_440.html","id":null,"dir":"Reference","previous_headings":"","what":"Pure sine wave — ts_sin_440","title":"Pure sine wave — ts_sin_440","text":"Assuming sample rate 44100 Hz, sine wave's frequency 440 Hz.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_440.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pure sine wave — ts_sin_440","text":"","code":"ts_sin_440"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_440.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pure sine wave — ts_sin_440","text":"numeric vector containing time series signal.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_sin.html","id":null,"dir":"Reference","previous_headings":"","what":"A sinusoidal wave with varying frequency — ts_sin_sin","title":"A sinusoidal wave with varying frequency — ts_sin_sin","text":"frequency changing sinusoidal fashion.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_sin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sinusoidal wave with varying frequency — ts_sin_sin","text":"","code":"ts_sin_sin"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_sin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A sinusoidal wave with varying frequency — ts_sin_sin","text":"numeric vector containing time series signal.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_superpos.html","id":null,"dir":"Reference","previous_headings":"","what":"Superimposed sine waves of different frequencies and different amplitudes — ts_sin_superpos","title":"Superimposed sine waves of different frequencies and different amplitudes — ts_sin_superpos","text":"Assuming sample rate 44100 Hz, superimposed signals' frequencies 440 Hz, 880 Hz, 100 Hz, 500 Hz, 1200 Hz 50 Hz.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_superpos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Superimposed sine waves of different frequencies and different amplitudes — ts_sin_superpos","text":"","code":"ts_sin_superpos"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/ts_sin_superpos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Superimposed sine waves of different frequencies and different amplitudes — ts_sin_superpos","text":"numeric vector containing time series signal.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/u.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment physical unit — u","title":"Augment physical unit — u","text":"wrapper around units::set_units() mostly short name create dimensionful quantity.","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment physical unit — u","text":"","code":"u(x, unit = \"1\")"},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/u.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment physical unit — u","text":"x numeric vector augmented unit. unit character indicating unit. See units::valid_udunits() units::valid_udunits_prefixes() possible units.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/fcwtr/reference/u.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment physical unit — u","text":"","code":"u(10, \"km\") # 10 kilometer #> 10 [km] u(10, \"mm\") # 10 mm #> 10 [mm]  # comparison taking into account the unit u(100, \"m\") > u(1, \"km\") #> [1] FALSE"},{"path":"https://lschneiderbauer.github.io/fcwtr/news/index.html","id":"fcwtr-029000","dir":"Changelog","previous_headings":"","what":"fCWTr 0.2.9000","title":"fCWTr 0.2.9000","text":"fcwt(): fix bug fcwt(..., n_freqs = 1, ...) leads faulty data representation. add freq_scale argument choose linear logarithmic frequency scale. allow (prefer) sample_freq, freq_begin, freq_end arguments passed dimensionful quantities, via u(). fcwt_batch(): allow (prefer) sample_freq, freq_begin, freq_end time_resolution arguments passed dimensionful quantities, via u(). cases, averaging procedure together batching lead accidentally dropped duplicated time slices: mechanism overhauled, every slice perfectly aligned now, even averaged. new unit helper functions: u() du(): include improved physical unit treatment units package. Frequency time parameters can now “units” objects, created u(). Allow user adjust plot() scales use arbitrary time/frequency units. new helper functions determine correct value sigma given use case: sigma_resolution(), sigma_from_time_resolution(), sigma_from_frequency_resolution(). add convenience S3 methods: print(), [], .matrix(), rbind(), tibble::as_tibble(). openmp_enabled()/avx_enabled() new functions check system OpenMP/AVX support. add package logo","code":""},{"path":"https://lschneiderbauer.github.io/fcwtr/news/index.html","id":"fcwtr-021","dir":"Changelog","previous_headings":"","what":"fCWTr 0.2.1","title":"fCWTr 0.2.1","text":"CRAN release: 2024-06-17 Initial CRAN submission.","code":""}]
